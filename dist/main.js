(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([n.id,".hidden {\n    display: none;\n}\n\nbody {\n    background-color: #0078AA;\n}\n\nh1, h2, p {\n    color: white;\n    font-family: sans-serif;\n}\n\n.page-title {\n    text-align: center;\n}\n\n.main-page {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.flex-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.board-container {\n    margin: 0 auto;\n    padding: 2rem 10rem;\n    background-color: #3AB4F2;\n}\n\n.player-info-container {\n    padding: 0 5rem;\n    text-align: center;\n}\n\n.player-buttons-container {\n    display: flex;\n    flex-direction: row;\n    gap: 4rem;\n}\n\n.player-button {\n    flex-grow: 1;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,mBAAmB;IACnB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".hidden {\n    display: none;\n}\n\nbody {\n    background-color: #0078AA;\n}\n\nh1, h2, p {\n    color: white;\n    font-family: sans-serif;\n}\n\n.page-title {\n    text-align: center;\n}\n\n.main-page {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.flex-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.board-container {\n    margin: 0 auto;\n    padding: 2rem 10rem;\n    background-color: #3AB4F2;\n}\n\n.player-info-container {\n    padding: 0 5rem;\n    text-align: center;\n}\n\n.player-buttons-container {\n    display: flex;\n    flex-direction: row;\n    gap: 4rem;\n}\n\n.player-button {\n    flex-grow: 1;\n}"],sourceRoot:""}]);const i=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),c=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(c).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},c=[],i=0;i<n.length;i++){var s=n[i],l=r.base?s[0]+r.base:s[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var f=o(A,r);r.byIndex=i,e.splice(i,0,{identifier:u,updater:f,references:1})}c.push(u)}return c}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var c=0;c<a.length;c++){var i=t(a[c]);e[i].references--}for(var s=r(n,o),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=n=>{var e;e="player"===n?"Congratulations: YOU WON!":"Too bad. YOU LOST :(",document.querySelector(".game-results").innerHTML=e,document.querySelector(".player-buttons-container").classList.add("hidden")},e=n=>{let e=0;for(const t of n)e+=t.cardValue;return e},r=(n,t,r)=>{const o={isFinished:r,winner:null},a=e(n),c=e(t);return o.isFinished?a>21?(o.winner="dealer",o):c>21?(o.winner="player",o):(o.winner=a>c?"player":"dealer",o):21===a||c>21?(o.isFinished=!0,o.winner="player",o):21===c||a>21?(o.isFinished=!0,o.winner="dealer",o):o},o=n=>{var t,r;t=n.participantIdentifier,r=n.cards,document.querySelector(`#${t}-cards`).innerHTML="".concat(...r.map((n=>n.printCard())));const o=e(n.cards);var a,c;a=n.participantIdentifier,c=o,document.querySelector(`#${a}-sum`).innerHTML=c},a=()=>{document.querySelector(".game-results").innerHTML="",document.querySelector(".player-buttons-container").classList.remove("hidden");const t=(()=>{const n=["A",2,3,4,5,6,7,8,9,10,"K","Q","J"],e=["♣","♦","♥","♠"],t=(()=>{const t=[];for(const r of e)t.push(...n.map((n=>{return{cardName:e=n,cardSuit:t=r,cardValue:"string"==typeof e?"A"===e?11:10:e,cardMonetaryValue:()=>"string"==typeof e?500:100,printCard:()=>`(${t}:${e})`};var e,t})));return t})();return{cardsDeck:t,selectRandomCard:()=>{const n=Math.floor(Math.random()*t.length);let e=t[n];return[e]=t.splice(n,1),e}}})(),a=(()=>{const e=[],t="player";return{cards:e,hit:(a,c)=>{const i=a.selectRandomCard();e.push(i),o({cards:e,participantIdentifier:t});const s=r(e,c,!1);s.isFinished&&n(s.winner)},participantIdentifier:t}})(),c=(()=>{const t=[],a="dealer";return{cards:t,dealerTurn:(c,i)=>{let s=e(t);for(;s<17;){const n=c.selectRandomCard();t.push(n),s=e(t),o({cards:t,participantIdentifier:a})}console.log("DEALER CARDS:"),console.log(t);const l=r(i,t,!0);n(l.winner)},participantIdentifier:a}})();for(let n=0;n<2;n+=1){const n=t.selectRandomCard(),e=t.selectRandomCard();a.cards.push(n),c.cards.push(e)}return{sessionPlayer:a,sessionDealer:c,sessionDeck:t}},c=()=>{const e=document.querySelector("#hit-button"),t=document.querySelector("#stay-button"),c=e.cloneNode(!0),i=t.cloneNode(!0);e.replaceWith(c),t.replaceWith(i);const{sessionPlayer:s,sessionDealer:l,sessionDeck:d}=a();document.querySelector(".board-container").classList.remove("hidden"),document.querySelector(".player-buttons-container").classList.remove("hidden"),o(s),o(l);const u=r(s.cards,l.cards,!1);u.isFinished?n(u.winner):(c.addEventListener("click",(()=>s.hit(d,l.cards))),i.addEventListener("click",(()=>l.dealerTurn(d,s.cards))))};var i=t(379),s=t.n(i),l=t(795),d=t.n(l),u=t(569),p=t.n(u),A=t(565),f=t.n(A),m=t(216),y=t.n(m),h=t(589),v=t.n(h),g=t(426),C={};C.styleTagTransform=v(),C.setAttributes=f(),C.insert=p().bind(null,"head"),C.domAPI=d(),C.insertStyleElement=y(),s()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals,document.querySelector("#new-game-button").addEventListener("click",(()=>c()))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,