(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),c=t.n(o)()(a());c.push([e.id,".hidden {\n    display: none;\n}\n\nbody {\n    background-color: #0078AA;\n}\n\nh1, h2, h3, h4 p {\n    color: white;\n    font-family: sans-serif;\n}\n\n.page-title {\n    text-align: center;\n}\n\n.main-page {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.flex-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.board-container {\n    margin: 0 auto;\n    padding: 2rem 10rem;\n    background-color: #3AB4F2;\n}\n\n.player-info-container {\n    padding: 0 5rem;\n    text-align: center;\n}\n\n.player-buttons-container {\n    display: flex;\n    flex-direction: row;\n    gap: 4rem;\n}\n\n.player-button {\n    flex-grow: 1;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,mBAAmB;IACnB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB",sourcesContent:[".hidden {\n    display: none;\n}\n\nbody {\n    background-color: #0078AA;\n}\n\nh1, h2, h3, h4 p {\n    color: white;\n    font-family: sans-serif;\n}\n\n.page-title {\n    text-align: center;\n}\n\n.main-page {\n    display: flex;\n    flex-direction: column;\n\n}\n\n.flex-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.board-container {\n    margin: 0 auto;\n    padding: 2rem 10rem;\n    background-color: #3AB4F2;\n}\n\n.player-info-container {\n    padding: 0 5rem;\n    text-align: center;\n}\n\n.player-buttons-container {\n    display: flex;\n    flex-direction: row;\n    gap: 4rem;\n}\n\n.player-button {\n    flex-grow: 1;\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&c[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),c=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(c).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},c=[],s=0;s<e.length;s++){var i=e[s],l=r.base?i[0]+r.base:i[0],u=o[l]||0,d="".concat(l," ").concat(u);o[l]=u+1;var p=t(d),A={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var f=a(A,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:f,references:1})}c.push(d)}return c}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<o.length;c++){var s=t(o[c]);n[s].references--}for(var i=r(e,a),l=0;l<o.length;l++){var u=t(o[l]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=i}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=e=>{document.querySelector(".player-acumulated-earnings").innerHTML=e},n=n=>{const t=localStorage.getItem("blackjack-acumulated-results")||0,r=parseInt(t,10)+n.sessionPrize;console.log(n.sessionPrize),localStorage.setItem("blackjack-acumulated-results",r);const a="player"===n.winner?`Congratulations: YOU WON ${n.sessionPrize}`:"Too bad. YOU LOST :(";var o;e(r),o=a,document.querySelector(".game-results").innerHTML=o,document.querySelector(".player-buttons-container").classList.add("hidden")},r=e=>{let n=0;for(const t of e)n+=t.cardValue;return n},a=e=>{let n=0;for(const t of e)n+=t.cardMonetaryValue;return n},o=(e,n,t)=>{const o={isFinished:t,winner:null,sessionPrize:0},c=r(e),s=r(n);return o.isFinished?c>21?(o.winner="dealer",o.sessionPrize=0,o):s>21?(o.winner="player",o.sessionPrize=21===c?1e3+a(e):a(e),o):(o.winner=c>s?"player":"dealer",o):21===c||s>21?(o.isFinished=!0,o.winner="player",o.sessionPrize=21===c?1e3+a(e):a(e),o):21===s||c>21?(o.isFinished=!0,o.winner="dealer",o.sessionPrize=0,o):o},c=e=>{var n,t;n=e.participantIdentifier,t=e.cards,document.querySelector(`#${n}-cards`).innerHTML="".concat(...t.map((e=>e.printCard())));const a=r(e.cards);var o,c;o=e.participantIdentifier,c=a,document.querySelector(`#${o}-sum`).innerHTML=c},s=()=>{document.querySelector(".game-results").innerHTML="",document.querySelector(".player-buttons-container").classList.remove("hidden");const e=(()=>{const e=["A",2,3,4,5,6,7,8,9,10,"K","Q","J"],n=["♣","♦","♥","♠"],t=(()=>{const t=[];for(const r of n)t.push(...e.map((e=>{return{cardName:n=e,cardSuit:t=r,cardValue:"string"==typeof n?"A"===n?11:10:n,cardMonetaryValue:"string"==typeof n?500:100,printCard:()=>`(${t}:${n})`};var n,t})));return t})();return{cardsDeck:t,selectRandomCard:()=>{const e=Math.floor(Math.random()*t.length);let n=t[e];return[n]=t.splice(e,1),n}}})(),t=(()=>{const e=[],t="player";return{cards:e,hit:(r,a)=>{const s=r.selectRandomCard();e.push(s),c({cards:e,participantIdentifier:t});const i=o(e,a,!1);i.isFinished&&n(i)},participantIdentifier:t}})(),a=(()=>{const e=[],t="dealer";return{cards:e,dealerTurn:(a,s)=>{let i=r(e);for(;i<17;){const n=a.selectRandomCard();e.push(n),i=r(e),c({cards:e,participantIdentifier:t})}const l=o(s,e,!0);n(l)},participantIdentifier:t}})();for(let n=0;n<2;n+=1){const n=e.selectRandomCard(),r=e.selectRandomCard();t.cards.push(n),a.cards.push(r)}return{sessionPlayer:t,sessionDealer:a,sessionDeck:e}},i=()=>{const t=document.querySelector("#hit-button"),r=document.querySelector("#stay-button"),a=t.cloneNode(!0),i=r.cloneNode(!0);t.replaceWith(a),r.replaceWith(i);const{sessionPlayer:l,sessionDealer:u,sessionDeck:d}=s(),p=localStorage.getItem("blackjack-acumulated-results");e(p),document.querySelector(".board-container").classList.remove("hidden"),document.querySelector(".player-buttons-container").classList.remove("hidden"),c(l),c(u);const A=o(l.cards,u.cards,!1);A.isFinished?n(A):(a.addEventListener("click",(()=>l.hit(d,u.cards))),i.addEventListener("click",(()=>u.dealerTurn(d,l.cards))))};var l=t(379),u=t.n(l),d=t(795),p=t.n(d),A=t(569),f=t.n(A),m=t(565),y=t.n(m),h=t(216),v=t.n(h),g=t(589),b=t.n(g),I=t(426),C={};C.styleTagTransform=b(),C.setAttributes=y(),C.insert=f().bind(null,"head"),C.domAPI=p(),C.insertStyleElement=v(),u()(I.Z,C),I.Z&&I.Z.locals&&I.Z.locals;const x=document.querySelector("#new-game-button");localStorage.setItem("blackjack-acumulated-results",0);x.addEventListener("click",(()=>i()))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,